{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vlad_\\\\Desktop\\\\React\\\\recipes-site-react\\\\src\\\\components\\\\random-recipe\\\\RandomRecipe.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./RandomRecipe.module.css\";\nimport { Image } from \"../ui\";\nimport RandomRecipeInfo from \"../random-recipe-info\";\nimport Images from \"../../assets\";\nimport RecipesData from \"../recipes-database/RecipesData\";\nimport Spinner from \"../spinner\";\nimport ErrorIndicator from \"../error-indicator\";\nimport { withRouter } from \"react-router-dom\";\n\nclass RandomRecipe extends Component {\n  constructor(...args) {\n    super(...args);\n    this.recipes = new RecipesData();\n    this.state = {\n      recipe: {},\n      loading: true\n    };\n\n    this.onRecipeLoaded = recipe => {\n      this.setState({\n        recipe,\n        loading: false,\n        error: false\n      });\n    };\n\n    this.onError = error => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.updateRecipe = () => {\n      const id = Math.floor(Math.random() * 10 + 1);\n      const recipe = this.recipes.getRecipe(id);\n\n      try {\n        this.onRecipeLoaded(recipe);\n      } catch (error) {\n        this.onError(error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      updateInterval\n    } = this.props;\n    this.updateRecipe();\n    this.interval = setInterval(this.updateRecipe, updateInterval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      recipe,\n      loading,\n      error\n    } = this.state;\n    const {\n      history\n    } = this.props;\n    const hasData = !(loading || error);\n    const errorMessage = error ? React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }) : null;\n    const spinner = loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }) : null;\n    const content = hasData ? React.createElement(RecipeView, {\n      recipe: recipe,\n      history: history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"div\", {\n      className: s.RandomRecipe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, errorMessage, spinner, content);\n  }\n\n}\n\nRandomRecipe.defaultProps = {\n  updateInterval: 8000\n};\nRandomRecipe.propTypes = {\n  updateInterval: PropTypes.number\n};\n\nconst RecipeView = ({\n  recipe,\n  history\n}) => {\n  const [{\n    name,\n    synopsis,\n    id\n  }] = recipe;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Image, {\n    id: \"randomRecipeImg\",\n    src: Images[id],\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(RandomRecipeInfo, {\n    name: name,\n    synopsis: synopsis,\n    id: id,\n    history: history,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n};\n\nexport default withRouter(RandomRecipe);","map":{"version":3,"sources":["C:/Users/vlad_/Desktop/React/recipes-site-react/src/components/random-recipe/RandomRecipe.js"],"names":["React","Component","PropTypes","s","Image","RandomRecipeInfo","Images","RecipesData","Spinner","ErrorIndicator","withRouter","RandomRecipe","recipes","state","recipe","loading","onRecipeLoaded","setState","error","onError","updateRecipe","id","Math","floor","random","getRecipe","componentDidMount","updateInterval","props","interval","setInterval","componentWillUnmount","clearInterval","render","history","hasData","errorMessage","spinner","content","defaultProps","propTypes","number","RecipeView","name","synopsis"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./RandomRecipe.module.css\";\r\nimport { Image } from \"../ui\";\r\nimport RandomRecipeInfo from \"../random-recipe-info\";\r\nimport Images from \"../../assets\";\r\nimport RecipesData from \"../recipes-database/RecipesData\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass RandomRecipe extends Component {\r\n  static defaultProps = {\r\n    updateInterval: 8000,\r\n  };\r\n\r\n  static propTypes = {\r\n    updateInterval: PropTypes.number,\r\n  };\r\n\r\n  recipes = new RecipesData();\r\n\r\n  state = {\r\n    recipe: {},\r\n    loading: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { updateInterval } = this.props;\r\n    this.updateRecipe();\r\n    this.interval = setInterval(this.updateRecipe, updateInterval);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  onRecipeLoaded = (recipe) => {\r\n    this.setState({\r\n      recipe,\r\n      loading: false,\r\n      error: false,\r\n    });\r\n  };\r\n\r\n  onError = (error) => {\r\n    this.setState({\r\n      error: true,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  updateRecipe = () => {\r\n    const id = Math.floor(Math.random() * 10 + 1);\r\n    const recipe = this.recipes.getRecipe(id);\r\n    try {\r\n      this.onRecipeLoaded(recipe);\r\n    } catch (error) {\r\n      this.onError(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { recipe, loading, error } = this.state;\r\n    const { history } = this.props;\r\n\r\n    const hasData = !(loading || error);\r\n\r\n    const errorMessage = error ? <ErrorIndicator /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n\r\n    const content = hasData ? (\r\n      <RecipeView recipe={recipe} history={history} />\r\n    ) : null;\r\n\r\n    return (\r\n      <div className={s.RandomRecipe}>\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst RecipeView = ({ recipe, history }) => {\r\n  const [{ name, synopsis, id }] = recipe;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Image id=\"randomRecipeImg\" src={Images[id]} alt=\"\" />\r\n      <RandomRecipeInfo\r\n        name={name}\r\n        synopsis={synopsis}\r\n        id={id}\r\n        history={history}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(RandomRecipe);\r\n"]},"metadata":{},"sourceType":"module"}